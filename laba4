#include <iostream>
#include <string>

using namespace std;

class furniture {
private:
    string matrl;
public:
    furniture(string matrl):matrl(matrl){}
    furniture() {}
    virtual ~furniture() {}

    virtual double raschet() = 0;
    virtual void printInfo() = 0;

    string GetMatrl() const {
        return matrl;
    }
};

class cupboard : public furniture {
private:
    int kol_vo;
public:
    cupboard(string matrl, int kol_vo) :furniture(matrl), kol_vo(kol_vo) {}
    ~cupboard() {}

    int GetKol_vo() const {
        return kol_vo;
    }
    double raschet() {
        cout << "Material is equal " << this->GetKol_vo() * 0.23;
            return this->GetKol_vo() * 0.23;
    }
    void printInfo() {
        cout << "MATRL: " << this->GetMatrl() << "kolichestvo: " << this->GetKol_vo() << endl;
    }
};

class closet : public cupboard {
private:
    double price;
public:
    closet(string matrl, int kol_vo, double price) : cupboard(matrl, kol_vo), price(price) {}
    ~closet() {}

    double GetPrice() const {
        return price;
    }
    
    void printInfo() {
        cout << "MATRL: " << this->GetMatrl() << "kolichestvo: " << this->GetKol_vo() << "Price: " << this->GetPrice() << endl;
    }
};

class bed : public furniture {
private:
    double dlina;
public:
    bed(string matrl, double dlina) : furniture(matrl), dlina(dlina) {}
    ~bed() {}

    double GetDlina() const {
        return dlina;
    }
    double raschet() {
        cout << "nety chego rashityvat";
        return 0;
    }
    void printInfo() {
        cout << "MATRL: " << this->GetMatrl() << "Dlina: " << this->GetDlina() << endl;
    }
};

class double_bed : public bed {
private:
    double shirina;
public:
    double_bed(string matrl, double dlina, double shirina) : bed(matrl, dlina), shirina(shirina) {}
    ~double_bed() {}

    double GetShirina() const {
        return shirina;
    }
    double raschet() {
        cout << "Square double_bed is equal " << this->GetDlina() * this->GetShirina();
        return this->GetDlina() * this->GetShirina();
    }
    void printInfo() {
        cout << "MATRL: " << this->GetMatrl() << "Dlina: " << this->GetDlina() << "SHIRINA: " << this->GetShirina() << endl;
    }
};

class double_closet_bed :public double_bed, public closet {
private:
    int procent_krutosti;
public:
    double_closet_bed(string matrl, int kol_vo, double price, double dlina, double shirina, int procent_krutosti) : closet(matrl, kol_vo, price), double_bed(matrl, dlina, shirina), procent_krutosti(procent_krutosti) {}
    ~double_closet_bed() {}

    int GetPC() const {
        return procent_krutosti;
    }
    double raschet() {
        cout << "Square double_closet_bed is equal " << this->GetDlina() * this->GetShirina();
        return this->GetDlina() * this->GetShirina();
    }
    void printInfo() {
        cout << "MATRL: " << this->double_bed::GetMatrl() 
             << " kolichestvo: " << this->GetKol_vo() 
             << " Price: " << this->GetPrice() 
             << " Dlina: " << this->GetDlina() 
             << " SHIRINA: " << this->GetShirina() 
             << " procent krutosti: " << this->GetPC() << endl;
    }
};


int main()
{
    setlocale(LC_ALL, "Russian");
    string matrl;
    int kol_vo, PC;
    double dlina, shirina, price;
    cout << "input material, number of selections, product price, length, widht, and PC procent" << endl;
    cin >> matrl >> kol_vo >> price >> dlina >> shirina >> PC;
    double_closet_bed O(matrl, kol_vo, price, dlina , shirina , PC);
    O.printInfo();
    O.raschet();
    int k;
    cin >> k;
    furniture** mass = new furniture*[k];
    for (int i = 0; i < k; i += 3) {
        cin >> matrl >> kol_vo;
        mass[i] = new cupboard(matrl, kol_vo);
        if (i + 1 < k) {
            cin >> matrl >> kol_vo >> price;
            mass[i + 1] = new closet(matrl, kol_vo, price);
       }
        if (i + 2 < k) {
            cin >> matrl >> dlina;
            mass[i + 2] = new bed(matrl, dlina);
        }
    }
    for (int j = 0; j < k; j++) {
        mass[j]->printInfo();
        mass[j]->raschet();
        delete mass[j];
    }
    
    return 0;
}
